#+TITLE: Emacs Configuration
#+AUTHOR: Rieljun Liguid

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.

* Installing Emacs
  
On macOS, [[http://brew.sh/][homebrew]] is an easy way to install emacs.

Here's what the parameter means.
- ~--with-cocoa~ :: installs emacs with the macOS GUI version
- ~--with-imagemagick~ :: installs emacs with imagemagick support for image processing
- ~--with-gnutls~ :: installs emacs with GnuTLS to utilize encrypted SSL and TLS connections

#+begin_src sh
brew install emacs --with-cocoa --with-imagemagick --with-gnutls
#+end_src

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Rieljun Liguid"
      user-mail-address "me@iamriel.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Evil Mode

This adds vim emulation within emacs. Configuration related to evil mode resides here.

** Evil Leader

This is where we map Evil leader keys

#+BEGIN_SRC emacs-lisp
(defun air--config-evil-leader ()
  "Configure evil leader mode."
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    ","  'jedi:goto-definition
    "."  'jedi:goto-definition-pop-marker
    ":"  'eval-expression
    "?"  'jedi:show-doc
    "b"  'balance-windows
    "B"  'magit-blame-toggle
    "c"  'comment-line
    "C"  'comment-or-uncomment-region
    "d"  'kill-this-buffer
    "D"  'magit-discard
    "es" 'eshell
    "f"  'helm-imenu            ;; Jump to function in buffer
    "F"  'set-frame-font
    "h"  'fontify-and-browse    ;; HTML-ize the buffer and browse the result
    "ic" 'projectile-invalidate-cache
    "im" 'highlight-indentation-mode
    "mb" 'magit-branch-and-checkout
    "mc" 'magit-checkout
    "mC" 'magit-commit
    "mf" 'magit-fetch
    "ml" 'magit-log
    "mm" 'magit-merge
    "ms" 'magit-status
    "n"  'neotree-toggle
    "N"  'neotree-project-dir
    "l"  'whitespace-mode       ;; Show invisible characters
    "o"  'delete-other-windows  ;; C-w o
    "p"  'magit-push-to-remote
    "P"  'magit-push
    "s"  'helm-do-ag-project-root            ;; Ag search from project's root
    "S"  'helm-resume
    "r"  'split-window-right
    "T"  'elpy-test-django-runner
    "te" 'web-mode-dom-errors-show
    "th" 'web-mode-tag-highlight
    "tm" 'web-mode-tag-match
    "tn" 'web-mode-tag-next
    "tp" 'web-mode-tag-previous
    "tw" 'delete-trailing-whitespace
    "v"  'venv-workon
    "w"  'save-buffer
    "x"  'helm-M-x
    "y"  'yank-to-x-clipboard))
#+END_SRC
** Evil Keybindings
#+BEGIN_SRC  emacs-lisp
(defun air--config-evil ()
  ;; Use Emacs state in these additional modes.
  (dolist (mode '(ag-mode
                  dired-mode
                  eshell-mode
                  flycheck-error-list-mode
                  git-rebase-mode
                  octopress-mode
                  octopress-server-mode
                  octopress-process-mode
                  sunshine-mode
                  term-mode))
    (add-to-list 'evil-emacs-state-modes mode))

  (delete 'term-mode evil-insert-state-modes)
  (delete 'eshell-mode evil-insert-state-modes)

  ;; Use insert state in these additional modes.
  (dolist (mode '(twittering-edit-mode
                  magit-log-edit-mode))
    (add-to-list 'evil-insert-state-modes mode))

  (add-to-list 'evil-buffer-regexps '("\\*Flycheck"))

  (evil-add-hjkl-bindings occur-mode-map 'emacs
    (kbd "/")       'evil-search-forward
    (kbd "n")       'evil-search-next
    (kbd "N")       'evil-search-previous
    (kbd "C-d")     'evil-scroll-down
    (kbd "C-u")     'evil-scroll-up
    (kbd "C-w C-w") 'other-window)

  (evil-define-key 'insert global-map (kbd "C-y") 'yas-expand)
  (evil-define-key 'insert global-map (kbd "C-j") (simulate-key-press "<down>"))
  (evil-define-key 'insert global-map (kbd "C-k") (simulate-key-press "<up>"))
  (evil-define-key 'normal global-map (kbd ";") (simulate-key-press ":"))

  (evil-set-initial-state 'magit-mode 'insert)
  (evil-set-initial-state 'magit-status-mode 'insert)
  (evil-set-initial-state 'magit-diff-mode 'insert)
  (evil-set-initial-state 'magit-log-mode 'insert)
  (evil-define-key 'normal magit-status-mode-map (kbd "j") (simulate-key-press "<down>"))
  (evil-define-key 'insert magit-status-mode-map (kbd "j") (simulate-key-press "<down>"))
  (evil-define-key 'normal magit-status-mode-map (kbd "k") (simulate-key-press "<up>"))
  (evil-define-key 'insert magit-status-mode-map (kbd "k") (simulate-key-press "<up>"))
  (evil-define-key 'insert magit-status-mode-map (kbd "C-SPC") (simulate-key-press "<escape>"))

  ;; Global bindings.
  (evil-define-key 'normal global-map (kbd "<down>")  'evil-next-visual-line)
  (evil-define-key 'normal global-map (kbd "<up>")    'evil-previous-visual-line)
  (evil-define-key 'normal global-map (kbd "-")       'helm-find-files)
  (evil-define-key 'normal global-map (kbd "C-`")     (lambda ()
                                                        (interactive)
                                                        (dired (expand-file-name "~"))))
  (evil-define-key 'normal global-map (kbd "C-p")     'helm-projectile)
  (evil-define-key 'normal global-map (kbd "C-S-p")   'helm-projectile-switch-project)

  (evil-define-key 'insert global-map (kbd "C-;")     'evil-normal-state)
  (evil-define-key 'normal global-map (kbd "C-h")     'evil-window-left)
  (evil-define-key 'normal global-map (kbd "C-j")     'evil-window-down)
  (evil-define-key 'normal global-map (kbd "C-k")     'evil-window-up)
  (evil-define-key 'normal global-map (kbd "C-l")     'evil-window-right)

  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  ;; Make escape quit everything, whenever possible.
  (define-key evil-normal-state-map [escape] 'keyboard-escape-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

  ;; My own Ex commands.
  (evil-ex-define-cmd "om" 'octopress-status))
#+END_SRC
** Evil Configuration
   
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (add-hook 'evil-mode-hook 'air--config-evil)
  (evil-mode 1)

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (air--config-evil-leader))
)
#+END_SRC

** Evil Visualstar

Make a visual selection with v or V, and then hit * to search that selection forward,
or # to search that selection backward. You can see the repository [[https://github.com/bling/evil-visualstar][here]].

#+BEGIN_SRC emacs-lisp
(use-package evil-visualstar
  :ensure t
  :config
  (global-evil-visualstar-mode))
#+END_SRC

** Evil Escape
   
Customizable key sequence to escape from insert state and everything else in Emacs.
In this config, pressing "jk" consecutively will simulate escape key. You can check
the repository [[https://github.com/syl20bnr/evil-escape][here]].

#+BEGIN_SRC emacs-lisp
(use-package evil-escape
  :ensure t
  :config
  (evil-escape-mode 1)
  (setq evil-escape-key-sequence "jk"))
#+END_SRC

* Theme
** Apropospriate-theme
   
[[https://github.com/waymondo/apropospriate-theme][Apropospriate Theme]] is a colorful, low-contrast, light & dark theme set for Emacs 24.3+.
It strives to be pleasant, clean, and consistent, with special focus for the current buffer.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package apropospriate-theme
  :ensure t
  :load-path "themes"
  :config
  (load-theme 'apropospriate-dark t))
#+END_SRC

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+end_src

** Monokai theme

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src

** Waher theme

#+begin_src emacs-lisp :tangle no
(use-package waher-theme
  if (window-system)
  :ensure t
  :init
  (load-theme 'waher))
#+end_src

* Font

[[https://github.com/powerline/fonts/tree/master/SourceCodePro][Source Code Pro for Powerline]] is is derived from Source Code Pro font by Adobe for Powerline users.

Here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Source Code Pro for Powerline"  ))
(set-face-attribute 'default t :font "Source Code Pro for Powerline" )
#+end_src

Below are font utilities like resizing fonts

#+BEGIN_SRC emacs-lisp
(defcustom sanityinc/force-default-font-for-symbols nil
  "When non-nil, force Emacs to use your default font for symbols."
  :type 'boolean)

(defun sanityinc/maybe-use-default-font-for-symbols ()
  "Force Emacs to render symbols using the default font, if so configured."
  (when sanityinc/force-default-font-for-symbols
    (set-fontset-font "fontset-default" 'symbol (face-attribute 'default :family))))

(add-hook 'after-init-hook 'sanityinc/maybe-use-default-font-for-symbols)

;;; Changing font sizes

(require 'cl)

(defun sanityinc/font-name-replace-size (font-name new-size)
  (let ((parts (split-string font-name "-")))
    (setcar (nthcdr 7 parts) (format "%d" new-size))
    (mapconcat 'identity parts "-")))

(defun sanityinc/set-frame-font-size (size)
    (set-frame-font (sanityinc/font-name-replace-size (face-font 'default) size) t t))

(defun sanityinc/increment-default-font-height (delta)
  "Adjust the default font height by DELTA on every frame.
Emacs will keep the pixel size of the frame approximately the
same.  DELTA should be a multiple of 10, to match the units used
by the :height face attribute."
  (let* ((new-height (+ (face-attribute 'default :height) delta))
         (new-point-height (/ new-height 10)))
    (sanityinc/set-frame-font-size new-point-height)
    (set-face-attribute 'default nil :height new-height)
    (message "Default font size is now %d" new-point-height)))

(defun sanityinc/increase-default-font-height ()
  (interactive)
  (sanityinc/increment-default-font-height 10)
  (if (fboundp 'powerline-reset)
      (powerline-reset)))

(defun sanityinc/decrease-default-font-height ()
  (interactive)
  (sanityinc/increment-default-font-height -10)
  (if (fboundp 'powerline-reset)
      (powerline-reset)))

(bind-key (kbd "C-=") 'sanityinc/increase-default-font-height)
(bind-key (kbd "C--") 'sanityinc/decrease-default-font-height)
#+END_SRC

Display emojis. Source of system-specific fonts is in [[https://github.com/syohex/emacs-ac-emoji][the README for
the emacs-ac-emoji package.]]

#+BEGIN_SRC emacs-lisp
(let ((font (if (= emacs-major-version 25)
                "Symbola"
              (cond ((string-equal system-type "darwin")    "Apple Color Emoji")
                    ((string-equal system-type "gnu/linux") "Symbola")))))
  (set-fontset-font t 'unicode font nil 'prepend))
#+END_SRC

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp

;; Turning off ad-handle-definition the warnings
(setq ad-redefinition-action 'accept)

;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(setq-default left-fringe-width nil)
(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)
(setq org-src-fontify-natively t)

;; Why did I do this? Perhaps to keep vc from meddling with things
;; that Magit does, but it's convenient to be able to lean on vc for
;; certain things, so let's try it again with this turned on.
;; (eval-after-load "vc" '(setq vc-handled-backends nil))

(setq vc-follow-symlinks t)
(setq large-file-warning-threshold nil)
(setq split-width-threshold nil)
(setq custom-safe-themes t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell t)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t)
#+end_src

* Mac customizations

There are configurations to make when running Emacs on macOS (hence the
"darwin" system-type check).

#+begin_src emacs-lisp
(when (string-equal system-type "darwin")
  ;; delete files by moving them to the trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")

  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; set the Fn key as the hyper key
  (setq ns-function-modifier 'hyper)

  ;; Use Command-` to switch between Emacs windows (not frames)
  (bind-key "s-`" 'other-window)
  
  ;; Use Command-Shift-` to switch Emacs frames in reverse
  (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

  ;; Because of the keybindings above, set one for `other-frame'
  (bind-key "s-1" 'other-frame)

  ;; Fullscreen!
  (setq ns-use-native-fullscreen nil) ; Not Lion style
  (bind-key "<s-return>" 'toggle-frame-fullscreen)

  ;; buffer switching
  (bind-key "s-{" 'previous-buffer)
  (bind-key "s-}" 'next-buffer)

  ;; Compiling
  (bind-key "H-c" 'compile)
  (bind-key "H-r" 'recompile)
  (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

  ;; disable the key that minimizes emacs to the dock because I don't
  ;; minimize my windows
  ;; (global-unset-key (kbd "C-z"))

  (defun open-dir-in-finder ()
    "Open a new Finder window to the path of the current buffer"
    (interactive)
    (start-process "mai-open-dir-process" nil "open" "."))
  (bind-key "C-c o f" 'open-dir-in-finder)

  (defun open-dir-in-iterm ()
    "Open the current directory of the buffer in iTerm."
    (interactive)
    (let* ((iterm-app-path "/Applications/iTerm.app")
           (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
           (iterm-path (if (file-directory-p iterm-app-path)
                           iterm-app-path
                         iterm-brew-path)))
      (start-process "mai-open-dir-process" nil "open" "-a" iterm-path ".")))
  (bind-key "C-c o t" 'open-dir-in-iterm)

  ;; Not going to use these commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t))
#+end_src

** El Capitan fixes

http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/

#+BEGIN_SRC emacs-lisp
(let* ((cmd "sw_vers -productVersion")
       (macos-version (string-to-int
                     (cadr (split-string
                            (shell-command-to-string cmd)
                            "\\."))))
       (elcapitan-version 11))
  (when (>= macos-version elcapitan-version)
    (setq visible-bell nil)
    (setq ring-bell-function 'ignore)

    ;; El Capitan full screen animation is quick and delightful (enough to start using it).
    (setq ns-use-native-fullscreen t)))
#+END_SRC

* List buffers

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
;; make ibuffer the default buffer lister.
(defalias 'list-buffers 'ibuffer)
#+end_src


source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

#+begin_src emacs-lisp
(use-package recentf
  :bind ("C-x C-r" . helm-recentf)
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200))
#+end_src

* Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

** Installation

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib)
#+END_SRC

On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the .elc files from the package directory:

#+BEGIN_SRC sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+END_SRC

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

* Locate

Using macOS Spotlight within Emacs by modifying the ~locate~ function.

I usually use [[*Helm][~helm-locate~]], which does live updates the spotlight
search list as you type a query.

#+begin_src emacs-lisp
;; mdfind is the command line interface to Spotlight
(setq locate-command "mdfind")
#+end_src

* Window

Convenient keybindings to resize windows.

#+begin_src emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t)
  :bind (("M-s-<left>" . winner-undo)
         ("M-s-<right>" . winner-redo)))
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("H-t" . transpose-frame))
#+end_src

* Ido

#+begin_src emacs-lisp
(use-package ido
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("s-<f10>" . whitespace-mode))
#+end_src

* ELPA/External packages

These are the packages that are not built into Emacs.

** Angular

#+BEGIN_SRC emacs-lisp
(use-package ng2-mode :ensure t)

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)
(setq flycheck-check-syntax-automatically '(save mode-enabled))
(setq typescript-indent-level 4)
(setq tide-format-options '(:indentSize 4 :tabSize 4))
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
;; (add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

** Ansible

#+BEGIN_SRC emacs-lisp
(use-package ansible
  :ensure t
  :config
  (setq ansible::vault-password-file "/Users/light/.config/ansible/vault_pass.txt")
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
  (add-hook 'ansible-hook 'ansible::auto-decrypt-encrypt))
#+END_SRC
   
** Company
   
[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :config
  (global-company-mode)
  ; (setq company-tooltip-common-selection ((t (:inherit company-tooltip-selection :background "yellow2" :foreground "#c82829"))))
  ; (setq company-tooltip-selection ((t (:background "yellow2"))))
  (setq company-idle-delay 0.2)
  (setq company-selection-wrap-around t)
  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
  (define-key company-active-map [tab] 'company-complete)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

** Company Jedi

[[https://github.com/syohex/emacs-company-jedi][company-jedi]] is a company-mode completion back-end for Python JEDI.

#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :ensure t
  :config
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t))
#+END_SRC

** Dash

Integration with [[http://kapeli.com/dash][Dash, the API documentation browser on macOS]]. The
binding ~s-D~ is the same as Cmd-Shift-D, the same binding that dash
uses in Android Studio (trying to keep things consistent with the
tools I use).

#+begin_src emacs-lisp
(use-package dash-at-point
  :ensure t
  :bind (("s-D"     . dash-at-point)
         ("C-c e"   . dash-at-point-with-docset)))
#+end_src

** Dired

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]] makes an Emacs buffer containing a listing of a directory,
and optionally some of its subdirectories as well.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :config
  (require 'dired-x)
  (setq dired-omit-files "^\\.?#\\|^\\.[^.].*")

  (defun air-dired-buffer-dir-or-home ()
    "Open dired to the current buffer's dir, or $HOME."
    (interactive)
    (let ((cwd (or (file-name-directory (or (buffer-file-name) ""))
                   (expand-file-name "~"))))
      (dired cwd)))

  (defun my-dired-create-file (file)
    "Create a file called FILE.
    If FILE already exists, signal an error."
    (interactive
    (list (read-file-name "Create file: " (dired-current-directory))))
    (let* ((expanded (expand-file-name file))
       (try expanded)
       (dir (directory-file-name (file-name-directory expanded)))
       new)
      (if (file-exists-p expanded)
          (error "Cannot create file %s: file exists" expanded))
      ;; Find the topmost nonexistent parent dir (variable `new')
      (while (and try (not (file-exists-p try)) (not (equal new try)))
      (setq new try
              try (directory-file-name (file-name-directory try))))
      (when (not (file-exists-p dir))
      (make-directory dir t))
      (write-region "" nil expanded t)
      (when new
      (dired-add-file new)
      (dired-move-to-filename))))

  (add-hook 'dired-mode-hook (lambda ()
                               (dired-omit-mode t)))
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^")   (lambda () (interactive) (find-alternate-file "..")))
  (define-key dired-mode-map (kbd "C-.") 'dired-omit-mode)
  ;(define-key dired-mode-map (kbd "c")   'find-file)
  (define-key dired-mode-map (kbd "c")   'my-dired-create-file)
  (define-key dired-mode-map (kbd "/")   'evil-search-forward)
  (define-key dired-mode-map (kbd "?")   'evil-search-backward))
#+END_SRC

** Emmet
   
According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."
   
#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :config
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  (setq emmet-move-cursor-between-quotes t) ;; default nil
  )
#+end_src

** Elpy

[[https://github.com/jorgenschaefer/elpy][Elpy]] is an Emacs package to bring powerful Python editing to Emacs.
It combines and configures a number of other packages, both written in Emacs Lisp as well as Python.

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :init
  (elpy-enable)
  :config
  (setq elpy-rpc-backend "jedi")
  (setq elpy-test-django-runner-command '("./manage.py" "test"))
  (setq elpy-test-django-with-manage t)
  (setq python-shell-interpreter "ipython")
  )

(add-hook 'compilation-filter-hook 'python-test-track-pdb-prompt)
#+END_SRC

** EPC

[[https://github.com/kiwanami/emacs-epc][EPC]] program is an asynchronous RPC stack for Emacs. Using this RPC stack,
the Emacs can communicate with the peer process smoothly.

#+BEGIN_SRC emacs-lisp
(require 'epc)
(when noninteractive
  (load "subr")
  (load "byte-run"))
(eval-when-compile (require 'cl))

(message "Start EPC")

(defvar my-epc-server-py
  (expand-file-name "my-server.py"
                    (file-name-directory
                     (or load-file-name buffer-file-name))))

(defvar my-epc (epc:start-epc (or (getenv "PYTHON") "python")
                              (list my-epc-server-py)))

(message "Start request")

(deferred:$
  (epc:call-deferred my-epc 'echo '(10))
  (deferred:nextc it
    (lambda (x) (message "Return : %S" x))))


(message "Return : %S" (epc:call-sync my-epc 'echo '(10 40)))

(loop for i from 1 to 5
      do (deferred:$
           (epc:call-deferred my-epc 'echo (list i))
           (deferred:nextc it
             (lambda (x) (message "Return : %S" x)))))

(message "Return : %S"
         (epc:sync my-epc (epc:query-methods-deferred my-epc)))
#+END_SRC

** Exec Path From Shell

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] A GNU Emacs library to ensure environment variables inside
Emacs look the same as in the user's shell.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "PYTHONPATH")
  )
#+END_SRC

** Flycheck

[[http://www.flycheck.org/en/latest/][Flycheck]] is a modern on-the-fly syntax checking extension for GNU Emacs,
intended as replacement for the older Flymake extension which is part of GNU Emacs.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-flycheck-mode)

  ;; Flycheck mode:
  (add-hook 'flycheck-mode-hook
            (lambda ()
              (when (maybe-require-package 'evil)
                (evil-define-key 'normal flycheck-mode-map (kbd "]e") 'flycheck-next-error)
                (evil-define-key 'normal flycheck-mode-map (kbd "[e") 'flycheck-previous-error))
              (when (maybe-require-package 'evil-leader)
                (evil-leader/set-key (kbd "E") 'flycheck-list-errors))))

  ;; Override default flycheck triggers
  (setq flycheck-emacs-lisp-load-path 'inherit
        flycheck-check-syntax-automatically '(save idle-change mode-enabled)
        flycheck-idle-change-delay 0.8
        flycheck-disabled-checkers '(php-phpmd)
        flycheck-phpcs-standard "CSNStores")

  (setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list))
#+END_SRC

** Helm
   
[[https://github.com/emacs-helm/helm][Helm]] is an Emacs framework for incremental completions and narrowing selections.

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :commands (helm-projectile helm-projectile-switch-project))
          (use-package helm-ag
            :defer 10
            :ensure t
            :commands (helm-do-grep-ag))
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                helm-ff-newfile-prompt-p nil
                helm-M-x-fuzzy-match t)
          (helm-mode))
  :config
    (helm-mode 1)
    (setq helm-buffers-fuzzy-matching t)
    (setq helm-autoresize-mode t)
    (setq helm-buffer-max-length 40)
    ;; (setq helm-split-window-in-side-p t)
    (define-key helm-map (kbd "S-SPC") 'helm-toggle-visible-mark)
    (define-key helm-map (kbd "C-j") 'helm-next-line)
    (define-key helm-map (kbd "C-k") 'helm-previous-line))
#+end_src

** Magit
   
[[https://magit.vc/][Magit]] is an interface to the version control system Git, implemented as an Emacs package.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :config
  (setq magit-branch-arguments nil)
  (setq magit-push-always-verify nil)
  (setq magit-last-seen-setup-instructions "1.4.0")
  (magit-define-popup-switch 'magit-log-popup ?f "first parent" "--first-parent"))

;;; Magit mode (which does not open in evil-mode):
(add-hook 'magit-mode-hook
          (lambda ()
            (define-key magit-mode-map (kbd ",o") 'delete-other-windows)))

;;; Git Commit Mode (a Magit minor mode):
(add-hook 'git-commit-mode-hook 'evil-insert-state)
#+END_SRC

** Neotree
   
[[https://github.com/jaypei/emacs-neotree][Neotree]] is an Emacs tree plugin like NerdTree for Vim.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :ensure t)

(use-package neotree
  :ensure t
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (add-hook 'neotree-mode-hook
    (lambda ()
      (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
      (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
      (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
      (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
      (define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
      (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
      (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)

      (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
      (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)

      (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))

(use-package find-file-in-project :ensure t)
(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (ffip-project-root))
        (file-name (buffer-file-name)))
    (if project-dir
        (progn
        (neotree-dir project-dir)
        (neotree-find file-name))
    (message "Could not find git project root."))))

(provide 'init-neotree)
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line-powerline-theme
  :ensure t)

(use-package smart-mode-line
  :ensure t
  :config
  (require 'powerline)
  (setq powerline-default-separator-dir '(right . left))
  (setq sml/theme 'powerline)
  (sml/setup)
  ;; These colors are more pleasing (for gruvbox)
  (custom-theme-set-faces
    'user
    '(powerline-evil-normal-face ((t (:inherit powerline-evil-base-face :background "chartreuse3"))))
    '(sml/folder ((t (:inherit sml/global :background "grey22" :foreground "PaleGreen" :weight normal))) t)
    '(sml/modes ((t (:inherit sml/global :background "grey22" :foreground "LightSkyBlue" :weight normal))) t)
    '(sml/git ((t (:background "grey22" :foreground "chartreuse"))) t)
    '(sml/vc ((t (:inherit sml/git :foreground "AliceBlue"))) t)
    '(sml/vc-edited ((t (:background "grey22" :foreground "LightPink"))) t)
    '(sml/position-percentage ((t (:background "grey22" :foreground "LightPink"))) t)
    ;; '(sml/client ((t (:background "grey22" :foreground "chartreuse"))) t)
  ))
#+END_SRC

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to provide a nice set of
features operating on a project level without introducing external dependencies (when feasible).

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer 1
  :config
  (projectile-mode)
  (setq projectile-enable-caching t))
#+END_SRC

** S

#+BEGIN_SRC emacs-lisp
(use-package s
  :ensure t
  :defer 1)
#+END_SRC

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)
#+end_src

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t)
#+end_src

** Vimrc Mode
   
Syntax highligting for editing vimrc files.

#+BEGIN_SRC emacs-lisp
(use-package vimrc-mode :ensure t :defer t)
(add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+END_SRC

** Virtualenvwrapper
   
[[https://github.com/porterjamesj/virtualenvwrapper.el][Virtualenvwrapper]] is a featureful virtualenv tool for Emacs.
Emulates much of the functionality of Doug Hellmann's virtualenvwrapper.

#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell)
  (setq venv-location
        (expand-file-name "~/.virtualenvs/")))
#+END_SRC

** Visual Fill Column
   
[[https://github.com/joostkremers/visual-fill-column][visual-fill-column-mode]] is a small Emacs minor mode that mimics the effect of fill-column in visual-line-mode.

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column :ensure t)
#+END_SRC


** Web Mode

[[http://web-mode.org/][Web Mode]] is an autonomous emacs major-mode for editing web templates.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
    (setq web-mode-engines-alist
        '(("django"    . "\\.html\\'")
            ("php"    . "\\.php\\'"))
    )
    (setq web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-content-types-alist
        '(("jsx" . "\\.js[x]?\\'")))
  )

(eval-after-load "web-mode"
  '(set-face-underline 'web-mode-current-element-highlight-face t))
#+END_SRC

** Yaml Mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t :defer t)
#+END_SRC

** Yasnippet
   
[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation
and automatically expand it into function templates.
   
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :diminish yas-minor-mode
  :config
  (yas-global-mode)
  (yas-reload-all))
#+end_src

* Computer-specific settings

Load some computer-specific settings, such as the name and and email
address. The way the settings are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar
Sveen's]] config.

In my case, the computers I use usually use the same username (my
name, go figure), so instead of basing the specific settings from the
username, I use the hostname. The shell command ~hostname -s~ gets the
hostname for the computer without any "domain information," such as
the ".local" suffix.

#+begin_src emacs-lisp
(require 'subr-x) ;; #'string-trim
(defvar mai/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(setq mai/user-settings-dir
      (concat user-emacs-directory
              "users/"
              (string-trim (shell-command-to-string "hostname -s"))))
(add-to-list 'load-path mai/user-settings-dir)

;; Load settings specific for the current user
(when (file-exists-p mai/user-settings-dir)
  (mapc 'load (directory-files mai/user-settings-dir nil "^[^#].*el$")))
#+end_src

* Languages
** Python
*** TDD

#+BEGIN_SRC emacs-lisp
;;; init-tdd.el --- run tests on save and indicate success in the mode line

;; Copyright (C) 2014  Jorgen Schaefer <contact@jorgenschaefer.de>

;; Author: Jorgen Schaefer <contact@jorgenschaefer.de>
;; URL: https://github.com/jorgenschaefer/emacs-tdd
;; Version: 1.0
;; Keywords: tools, processes

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; After enabling `tdd-mode', any command to save a file will run
;; `recompile' (or a customisable function) in the background. The
;; mode line shows the status of the last compilation process.

;; This is meant to be used with test-driven development:

;; - Write a test and save the file
;; - Watch the test fail as the status line indicator turns red
;; - Write code and save the file until the status line turns green
;; - Repeat

;;; Code:

(require 'compile)

(defgroup tdd nil
  "Test-Driven Development Indicator."
  :prefix "tdd-"
  :group 'productivity)

(defvar tdd-mode-line-map (let ((map (make-sparse-keymap)))
                            (define-key map [mode-line mouse-1]
                              'tdd-display-buffer)
                            map)
  "Keymap used on the mode line indicator.")

(defcustom tdd-test-function #'recompile
  "Test function to run.
It will be run without arguments, whenever a buffer is saved. It
should run in compilation major mode, because checking for
success or failure depends the mode hooks.
The default is (recompile)"
  :type 'function
  :group 'tdd)

(defcustom tdd-success-symbol "✔"
  "Mode line symbol to show when tests passed."
  :type 'string
  :group 'tdd)

(defcustom tdd-success-face 'compilation-mode-line-exit
  "Face to use for `tdd-success-symbol'."
  :type 'face
  :group 'tdd)

(defcustom tdd-failure-symbol "✖"
  "Mode line symbol to show when tests failed."
  :type 'string
  :group 'tdd)

(defcustom tdd-failure-face 'compilation-mode-line-fail
  "Face to use for `tdd-failure-symbol'."
  :type 'face
  :group 'tdd)

(defcustom tdd-waiting-symbol "✱"
  "Mode line symbol to show when tests are running."
  :type 'string
  :group 'tdd)

(defcustom tdd-waiting-face 'compilation-mode-line-run
  "Face to use for `tdd-waiting-symbol'."
  :type 'face
  :group 'tdd)

(defvar tdd-mode-line-format ""
  "The mode line entry for the TDD indicator.")
(put 'tdd-mode-line-format 'risky-local-variable
     'do-show-properties-in-mode-line)

(defvar tdd-compilation-in-progress nil
  "Non-nil if we already started a compilation process.
Sadly, `get-buffer-process' does not work for preventing
duplicate compilation runs.")

;;;###autoload
(define-minor-mode tdd-mode
  "Test-driven development global minor mode.
Runs `tdd-test-function' every time a buffer is saved, and
adjusts a mode line indicator depending on the success or failure
of that compilation command."
  :global t
  (cond
   (tdd-mode
    (tdd-add-mode-line-format)
    (tdd-success)
    (add-hook 'compilation-finish-functions 'tdd-compilation-finish)
    (add-hook 'compilation-start-hook 'tdd-compilation-start)
    (add-hook 'after-save-hook 'tdd-after-save))
   (t
    (tdd-remove-mode-line-format)
    (setq tdd-mode-line-format "")
    (remove-hook 'compilation-finish-functions 'tdd-compilation-finish)
    (remove-hook 'compilation-start-hook 'tdd-compilation-start)
    (remove-hook 'after-save-hook 'tdd-after-save))))

(defun tdd-success ()
  "Set the TDD indicator to green."
  (interactive)
  (setq tdd-mode-line-format
        (propertize tdd-success-symbol
                    'face tdd-success-face
                    'keymap tdd-mode-line-map
                    'mouse-face 'mode-line-highlight
                    'help-echo (concat "Tests succeeded\n"
                                       "mouse-1: Switch to test buffer"))))

(defun tdd-failure ()
  "Set the TDD indicator to red."
  (interactive)
  (setq tdd-mode-line-format
        (propertize tdd-failure-symbol
                    'face tdd-failure-face
                    'keymap tdd-mode-line-map
                    'mouse-face 'mode-line-highlight
                    'help-echo (concat "Tests running\n"
                                       "mouse-1: Switch to test buffer"))))

(defun tdd-waiting ()
  "Set the TDD indicator to mark an ongoing compilation run."
  (interactive)
  (setq tdd-mode-line-format
        (propertize tdd-waiting-symbol
                    'face tdd-waiting-face
                    'keymap tdd-mode-line-map
                    'mouse-face 'mode-line-highlight
                    'help-echo (concat "Tests failed\n"
                                       "mouse-1: Switch to test buffer"))))

(defun tdd-display-buffer ()
  "Display the compilation buffer."
  (interactive)
  (let ((compilation-buffer (get-buffer
                             (compilation-buffer-name "compilation"
                                                      nil nil))))
    (when compilation-buffer
      (display-buffer compilation-buffer))))

(defun tdd-add-mode-line-format ()
  "Add `tdd-mode-line-format' to `mode-line-format'."
  (let ((global-mode-line (default-value 'mode-line-format)))
    (when (not (memq 'tdd-mode-line-format global-mode-line))
      (setq-default mode-line-format
                    (cons (car global-mode-line)
                          (cons 'tdd-mode-line-format
                                (cdr global-mode-line)))))))

(defun tdd-remove-mode-line-format ()
  "Add `tdd-mode-line-format' to `mode-line-format'."
  (let ((global-mode-line (default-value 'mode-line-format)))
    (when (memq 'tdd-mode-line-format global-mode-line)
      (setq-default mode-line-format
                    (delq 'tdd-mode-line-format
                          global-mode-line)))))

(defun tdd-after-save ()
  "Function run in `after-save-hook' to start the compilation."
  (when (not tdd-compilation-in-progress)
    (setq tdd-compilation-in-progress t)
    (let ((compilation-ask-about-save nil)
          (compilation-save-buffers-predicate (lambda () nil)))
      (save-window-excursion
        (funcall tdd-test-function)))))

(defun tdd-compilation-start (proc)
  "Function run from `compilation-start-hook'."
  (setq tdd-compilation-in-progress t)
  (tdd-waiting))

(defun tdd-compilation-finish (buf msg)
  "Function run from `compilation-finish-functions'."
  (setq tdd-compilation-in-progress nil)
  (if (string-match "exited abnormally" msg)
      (tdd-failure)
    (tdd-success)))
#+END_SRC

** Php
   
#+BEGIN_SRC emacs-lisp
(use-package php-mode :ensure t)
#+END_SRC

* Hooks
** git-commit-mode-hook
   
Git Commit Mode (a Magit minor mode):

#+BEGIN_SRC emacs-lisp
(add-hook 'git-commit-mode-hook 'evil-insert-state)
#+END_SRC

** emmet-mode-hook

#+BEGIN_SRC emacs-lisp
(add-hook 'emmet-mode-hook
  (lambda ()
    (evil-define-key 'insert emmet-mode-keymap (kbd "C-l") 'emmet-next-edit-point)
    (evil-define-key 'insert emmet-mode-keymap (kbd "C-h") 'emmet-prev-edit-point)
  ))
#+END_SRC

** magit-mode-hook
   
Magit mode which does not open in evil-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'magit-mode-hook
          (lambda ()
            (define-key magit-mode-map (kbd ",o") 'delete-other-windows)))
#+END_SRC

** python-mode-hook

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
  (lambda ()
  ;; I'm rudely redefining this function to do a comparison of `point'
  ;; to the end marker of the `comint-last-prompt' because the original
  ;; method of using `looking-back' to match the prompt was never
  ;; matching, which hangs the shell startup forever.
  (defun python-shell-accept-process-output (process &optional timeout regexp)
      "Redefined to actually work."
      (let ((regexp (or regexp comint-prompt-regexp)))
      (catch 'found
          (while t
          (when (not (accept-process-output process timeout))
              (throw 'found nil))
          (when (= (point) (cdr (python-util-comint-last-prompt)))
              (throw 'found t))))))

  ;; Additional settings follow.
  ;(add-to-list 'write-file-functions 'delete-trailing-whitespace)
  (add-to-list 'company-backends 'company-jedi)
  ;(add-to-list 'ac-sources 'ac-source-jedi-direct)
  (highlight-indentation-mode 0)
  ))
#+END_SRC

** web-mode-hook
   
#+BEGIN_SRC emacs-lisp
(defun my-web-mode-hook ()
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-auto-indentation t)
    (setq web-mode-attr-indent-offset 4)
    (setq web-mode-code-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-indent-style 4)
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-sql-indent-offset 4)
)
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC

* Misc
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

** Docview key bindings

Convenience bindings to use doc-view with the arrow keys.

#+begin_src emacs-lisp
(use-package doc-view
  :commands doc-view-mode
  :config
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
#+end_src

** Global key bindings
   
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c b") 'switch-to-prev-buffer)
(global-set-key (kbd "C-c n") 'switch-to-next-buffer)
(global-set-key (kbd "C-h") 'windmove-left)
(global-set-key (kbd "C-j") 'windmove-down)
(global-set-key (kbd "C-k") 'windmove-up)
(global-set-key (kbd "C-l") 'windmove-right)
#+END_SRC

** Maximize on startup

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized))))) ;; start maximized
#+END_SRC

** OS X scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount (quote (0.01)))
#+end_src

** Emacsclient

#+begin_src emacs-lisp
(use-package server
  :config
  (server-start))
#+end_src

#+begin_src emacs-lisp
#+end_src
